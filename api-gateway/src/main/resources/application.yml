# Spring Boot Application Configuration
spring:
  application:
    name: api-gateway

  # Api Gateway Configuration
  cloud:
    gateway:
      # Global configuration for the gateway
      httpserver:
        wiretap: true # Useful for debugging request/response body
      httpclient:
        wiretap: true # Useful for debugging request/response headers


      routes:
        # --- Application API Route for Product Query Service - GET History (Most Specific Query Path First) ---

        # Route for GET requests to get the history/events by ID
        # Incoming request: GET http://localhost:9999/ecommerce/api/v1/products-query/{id}/history
        # Target backend:     GET http://localhost:8082/ecommerce/api/v1/products/{id}/history
        - id: product_query_service_get_history # Unique ID
          uri: http://localhost:8082 # Target backend service URL (Query Service - Port 8082)
          predicates: # Conditions
            - Path=/ecommerce/api/v1/products-query/{id}/history # Match the history path pattern
            - Method=GET # Match GET method
          filters: # Actions
            - RewritePath=/ecommerce/api/v1/products-query/(?<segment>.*), /ecommerce/api/v1/products/${segment}
            # --- Add Rate Limiting Filter ---
            - name: RequestRateLimiter
              args:
                # Assuming a single KeyResolver bean is defined and can be auto-wired
                redis-rate-limiter.replenishRate: 50 # Allow 50 requests per second
                redis-rate-limiter.burstCapacity: 100 # Allow bursts up to 100 requests
                redis-rate-limiter.requestedTokens: 1 # Explicitly state each request consumes 1 token


        # --- Application API Route for Product Query Service - GET Single Item (Less Specific Query Path Second) ---

        # Route for GET requests to get the latest state by ID
        # Incoming request: GET http://localhost:9999/ecommerce/api/v1/products-query/{id}
        # Target backend:     GET http://localhost:8082/ecommerce/api/v1/products/{id}
        - id: product_query_service_get_one # Unique ID
          uri: http://localhost:8082 # Target backend service URL (Query Service - Port 8082)
          predicates: # Conditions
            - Path=/ecommerce/api/v1/products-query/{id} # Match the main path pattern
            - Method=GET # Match GET method
          filters: # Actions
            - RewritePath=/ecommerce/api/v1/products-query/(?<segment>.*), /ecommerce/api/v1/products/${segment}
            # --- Add Rate Limiting Filter ---
            - name: RequestRateLimiter
              args:
                # Assuming a single KeyResolver bean is defined and can be auto-wired
                redis-rate-limiter.replenishRate: 100 # Allow 100 requests per second
                redis-rate-limiter.burstCapacity: 200 # Allow bursts up to 200 requests
                redis-rate-limiter.requestedTokens: 1 # Explicitly state each request consumes 1 token


        # --- Application API Route for Product Command Service (POST) ---

        # Route for POST requests (Create Product)
        # Incoming request: POST http://localhost:9999/ecommerce/api/v1/products-command
        # Target backend:     POST http://localhost:8081/ecommerce/api/v1/products
        - id: product_command_service_post_create # Unique ID for the route
          uri: http://localhost:8081 # Target backend service URL (Command Service - Port 8081)
          predicates: # Conditions
            - Path=/ecommerce/api/v1/products-command # Match the exact path on the gateway
            - Method=POST # Match the HTTP method
          filters: # Actions
            - RewritePath=/ecommerce/api/v1/products-command, /ecommerce/api/v1/products
            # --- Add Rate Limiting Filter ---
            - name: RequestRateLimiter
              args:
                # Assuming a single KeyResolver bean is defined and can be auto-wired
                redis-rate-limiter.replenishRate: 5 # Allow 5 requests per second (commands often rate limited stricter)
                redis-rate-limiter.burstCapacity: 10 # Allow bursts up to 10 requests
                redis-rate-limiter.requestedTokens: 1 # Explicitly state each request consumes 1 token


        # --- Application API Route for Product Command Service (PUT) ---

        # Route for PUT requests (Update Product)
        # Incoming request: PUT http://localhost:9999/ecommerce/api/v1/products-command/{id}
        # Target backend:     PUT http://localhost:8081/ecommerce/api/v1/products/{id}
        - id: product_command_service_put_update # Unique ID for the route
          uri: http://localhost:8081 # Target backend service URL (Command Service - Port 8081)
          predicates: # Conditions
            - Path=/ecommerce/api/v1/products-command/{id} # Match the path pattern on the gateway, capturing the ID
            - Method=PUT # Match the HTTP method
          filters: # Actions
            - RewritePath=/ecommerce/api/v1/products-command/(?<segment>.*), /ecommerce/api/v1/products/${segment}
            # --- Add Rate Limiting Filter ---
            - name: RequestRateLimiter
              args:
                # Assuming a single KeyResolver bean is defined and can be auto-wired
                redis-rate-limiter.replenishRate: 5 # Allow 5 requests per second
                redis-rate-limiter.burstCapacity: 10 # Allow bursts up to 10 requests
                redis-rate-limiter.requestedTokens: 1 # Explicitly state each request consumes 1 token


# Server Configuration
server:
  port: 9999 # Gateway listening port


# Logging Configuration (Using your preferred levels)
logging:
  level:
    root: info # Default level for logs
    org:
      springframework:
        cloud:
          gateway: DEBUG # Enable tracing for gateway routing
        http:
          server:
            reactive: INFO # Enable tracing for Reactor Netty server
        web:
          reactive: INFO # Enable tracing for WebFlux
        boot:
          autoconfigure:
            web: INFO # Enable tracing for web autoconfiguration
    reactor:
      netty: INFO # Enable tracing for Reactor Netty
    # redisratelimiter: INFO # Uncomment and set to INFO if you add Redis Rate Limiter later