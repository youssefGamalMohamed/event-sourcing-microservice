/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.youssef.gamal.ecommerce.microservice.category.shared.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CategoryEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6040948011290878640L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CategoryEvent\",\"namespace\":\"com.youssef.gamal.ecommerce.microservice.category.shared.events\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"creationDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"createdBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"lastModifiedDate\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null},{\"name\":\"lastModifiedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<CategoryEvent> ENCODER =
      new BinaryMessageEncoder<CategoryEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CategoryEvent> DECODER =
      new BinaryMessageDecoder<CategoryEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CategoryEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CategoryEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CategoryEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CategoryEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CategoryEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CategoryEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CategoryEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CategoryEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String eventType;
  private java.lang.String name;
  private java.time.Instant creationDate;
  private java.lang.String createdBy;
  private java.time.Instant lastModifiedDate;
  private java.lang.String lastModifiedBy;
  private long timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CategoryEvent() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param eventType The new value for eventType
   * @param name The new value for name
   * @param creationDate The new value for creationDate
   * @param createdBy The new value for createdBy
   * @param lastModifiedDate The new value for lastModifiedDate
   * @param lastModifiedBy The new value for lastModifiedBy
   * @param timestamp The new value for timestamp
   */
  public CategoryEvent(java.lang.String id, java.lang.String eventType, java.lang.String name, java.time.Instant creationDate, java.lang.String createdBy, java.time.Instant lastModifiedDate, java.lang.String lastModifiedBy, java.lang.Long timestamp) {
    this.id = id;
    this.eventType = eventType;
    this.name = name;
    this.creationDate = creationDate;
    this.createdBy = createdBy;
    this.lastModifiedDate = lastModifiedDate;
    this.lastModifiedBy = lastModifiedBy;
    this.timestamp = timestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return eventType;
    case 2: return name;
    case 3: return creationDate;
    case 4: return createdBy;
    case 5: return lastModifiedDate;
    case 6: return lastModifiedBy;
    case 7: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: eventType = value$ != null ? value$.toString() : null; break;
    case 2: name = value$ != null ? value$.toString() : null; break;
    case 3: creationDate = (java.time.Instant)value$; break;
    case 4: createdBy = value$ != null ? value$.toString() : null; break;
    case 5: lastModifiedDate = (java.time.Instant)value$; break;
    case 6: lastModifiedBy = value$ != null ? value$.toString() : null; break;
    case 7: timestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'creationDate' field.
   * @return The value of the 'creationDate' field.
   */
  public java.time.Instant getCreationDate() {
    return creationDate;
  }


  /**
   * Sets the value of the 'creationDate' field.
   * @param value the value to set.
   */
  public void setCreationDate(java.time.Instant value) {
    this.creationDate = value;
  }

  /**
   * Gets the value of the 'createdBy' field.
   * @return The value of the 'createdBy' field.
   */
  public java.lang.String getCreatedBy() {
    return createdBy;
  }


  /**
   * Sets the value of the 'createdBy' field.
   * @param value the value to set.
   */
  public void setCreatedBy(java.lang.String value) {
    this.createdBy = value;
  }

  /**
   * Gets the value of the 'lastModifiedDate' field.
   * @return The value of the 'lastModifiedDate' field.
   */
  public java.time.Instant getLastModifiedDate() {
    return lastModifiedDate;
  }


  /**
   * Sets the value of the 'lastModifiedDate' field.
   * @param value the value to set.
   */
  public void setLastModifiedDate(java.time.Instant value) {
    this.lastModifiedDate = value;
  }

  /**
   * Gets the value of the 'lastModifiedBy' field.
   * @return The value of the 'lastModifiedBy' field.
   */
  public java.lang.String getLastModifiedBy() {
    return lastModifiedBy;
  }


  /**
   * Sets the value of the 'lastModifiedBy' field.
   * @param value the value to set.
   */
  public void setLastModifiedBy(java.lang.String value) {
    this.lastModifiedBy = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Creates a new CategoryEvent RecordBuilder.
   * @return A new CategoryEvent RecordBuilder
   */
  public static com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder newBuilder() {
    return new com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder();
  }

  /**
   * Creates a new CategoryEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CategoryEvent RecordBuilder
   */
  public static com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder newBuilder(com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder other) {
    if (other == null) {
      return new com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder();
    } else {
      return new com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder(other);
    }
  }

  /**
   * Creates a new CategoryEvent RecordBuilder by copying an existing CategoryEvent instance.
   * @param other The existing instance to copy.
   * @return A new CategoryEvent RecordBuilder
   */
  public static com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder newBuilder(com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent other) {
    if (other == null) {
      return new com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder();
    } else {
      return new com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for CategoryEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CategoryEvent>
    implements org.apache.avro.data.RecordBuilder<CategoryEvent> {

    private java.lang.String id;
    private java.lang.String eventType;
    private java.lang.String name;
    private java.time.Instant creationDate;
    private java.lang.String createdBy;
    private java.time.Instant lastModifiedDate;
    private java.lang.String lastModifiedBy;
    private long timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[3].schema(), other.creationDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[4].schema(), other.createdBy);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[5].schema(), other.lastModifiedDate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.lastModifiedBy)) {
        this.lastModifiedBy = data().deepCopy(fields()[6].schema(), other.lastModifiedBy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing CategoryEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.name)) {
        this.name = data().deepCopy(fields()[2].schema(), other.name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.creationDate)) {
        this.creationDate = data().deepCopy(fields()[3].schema(), other.creationDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[4].schema(), other.createdBy);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastModifiedDate)) {
        this.lastModifiedDate = data().deepCopy(fields()[5].schema(), other.lastModifiedDate);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastModifiedBy)) {
        this.lastModifiedBy = data().deepCopy(fields()[6].schema(), other.lastModifiedBy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[7].schema(), other.timestamp);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setEventType(java.lang.String value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setName(java.lang.String value) {
      validate(fields()[2], value);
      this.name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationDate' field.
      * @return The value.
      */
    public java.time.Instant getCreationDate() {
      return creationDate;
    }


    /**
      * Sets the value of the 'creationDate' field.
      * @param value The value of 'creationDate'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setCreationDate(java.time.Instant value) {
      validate(fields()[3], value);
      this.creationDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'creationDate' field has been set.
      * @return True if the 'creationDate' field has been set, false otherwise.
      */
    public boolean hasCreationDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'creationDate' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearCreationDate() {
      creationDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdBy' field.
      * @return The value.
      */
    public java.lang.String getCreatedBy() {
      return createdBy;
    }


    /**
      * Sets the value of the 'createdBy' field.
      * @param value The value of 'createdBy'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setCreatedBy(java.lang.String value) {
      validate(fields()[4], value);
      this.createdBy = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'createdBy' field has been set.
      * @return True if the 'createdBy' field has been set, false otherwise.
      */
    public boolean hasCreatedBy() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'createdBy' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearCreatedBy() {
      createdBy = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastModifiedDate' field.
      * @return The value.
      */
    public java.time.Instant getLastModifiedDate() {
      return lastModifiedDate;
    }


    /**
      * Sets the value of the 'lastModifiedDate' field.
      * @param value The value of 'lastModifiedDate'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setLastModifiedDate(java.time.Instant value) {
      validate(fields()[5], value);
      this.lastModifiedDate = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastModifiedDate' field has been set.
      * @return True if the 'lastModifiedDate' field has been set, false otherwise.
      */
    public boolean hasLastModifiedDate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastModifiedDate' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearLastModifiedDate() {
      lastModifiedDate = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastModifiedBy' field.
      * @return The value.
      */
    public java.lang.String getLastModifiedBy() {
      return lastModifiedBy;
    }


    /**
      * Sets the value of the 'lastModifiedBy' field.
      * @param value The value of 'lastModifiedBy'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setLastModifiedBy(java.lang.String value) {
      validate(fields()[6], value);
      this.lastModifiedBy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'lastModifiedBy' field has been set.
      * @return True if the 'lastModifiedBy' field has been set, false otherwise.
      */
    public boolean hasLastModifiedBy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'lastModifiedBy' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearLastModifiedBy() {
      lastModifiedBy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder setTimestamp(long value) {
      validate(fields()[7], value);
      this.timestamp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.youssef.gamal.ecommerce.microservice.category.shared.events.CategoryEvent.Builder clearTimestamp() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CategoryEvent build() {
      try {
        CategoryEvent record = new CategoryEvent();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (java.lang.String) defaultValue(fields()[1]);
        record.name = fieldSetFlags()[2] ? this.name : (java.lang.String) defaultValue(fields()[2]);
        record.creationDate = fieldSetFlags()[3] ? this.creationDate : (java.time.Instant) defaultValue(fields()[3]);
        record.createdBy = fieldSetFlags()[4] ? this.createdBy : (java.lang.String) defaultValue(fields()[4]);
        record.lastModifiedDate = fieldSetFlags()[5] ? this.lastModifiedDate : (java.time.Instant) defaultValue(fields()[5]);
        record.lastModifiedBy = fieldSetFlags()[6] ? this.lastModifiedBy : (java.lang.String) defaultValue(fields()[6]);
        record.timestamp = fieldSetFlags()[7] ? this.timestamp : (java.lang.Long) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CategoryEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<CategoryEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CategoryEvent>
    READER$ = (org.apache.avro.io.DatumReader<CategoryEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










