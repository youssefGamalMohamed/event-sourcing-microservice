# Spring Boot Application Configuration
spring:
  application:
    name: product-service

  # --- SQL Database (Postgres) ---
  datasource:
    # Connects to postgres-db (exposed at 5432 on host)
    url: jdbc:postgresql://localhost:5432/app-command-db
    username: appuser
    password: mypassword
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        hbm2ddl:
          create_namespaces: true    # ðŸ‘ˆ ensure schema auto-created
        default_schema: product_schema

  # --- MongoDB (Query side) ---
  data:
    mongodb:
      # Connects to mongodb-db (exposed at 27017 on host)
      uri: mongodb://appuser:mypassword@localhost:27017/productQueryDb?authSource=admin
      host: localhost
      port: 27017
      database: productQueryDb
      username: appuser
      password: mypassword

    # --- Redis (for caching/query service) ---
    redis:
      host: localhost   # redis-stack-main exposed at 6379
      port: 6379

  # --- Redis Cache ---
  cache:
    type: redis

  # --- Kafka Configuration ---
  kafka:
    bootstrap-servers: "127.0.0.1:9092" # broker service exposed on host

    # Producer (command side)
    producer:
      key-serializer: "org.apache.kafka.common.serialization.StringSerializer"
      value-serializer: "io.confluent.kafka.serializers.KafkaAvroSerializer"
      properties:
        schema:
          registry:
            url: "http://127.0.0.1:8081" # schema-registry exposed on host

    # Consumer (query side)
    consumer:
      group-id: "product-query-consumer-group"
      keyDeserializer: "org.apache.kafka.common.serialization.StringDeserializer"
      valueDeserializer: "io.confluent.kafka.serializers.KafkaAvroDeserializer"
      properties:
        schema:
          registry:
            url: "http://127.0.0.1:8081"
        specific:
          avro:
            reader: "true"

# --- Server Config ---
server:
  port: 8088  # kept from command service
  servlet:
    context-path: /ecommerce/api/v1

# --- Broker Topics ---
broker:
  topics:
    products-topic: products-topic

# --- Zipkin and Tracing Configs ---
management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0 # 100% traces (adjust for prod, e.g. 0.1)
  endpoints:
    web:
      exposure:
        include: "*"   # expose all actuator endpoints
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans # zipkin exposed in compose

# --- RabbitMQ (if used later) ---
rabbitmq:
  queues-names:
    product_queue: product_queue
  exchange-names:
    ecommerce_exchange: ecommerce_exchange
  routing-keys:
    product_service_routing_key: product_service_routing_key

# --- Eureka Discovery Client ---
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

# --- Logging ---
logging:
  level:
    org:
      springframework:
        kafka: DEBUG
        cache: TRACE
